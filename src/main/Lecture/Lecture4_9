REST API와 Ajax
    1.JSON이란?
        Java Script Object Notation - 자바 스크립트 객체 표기법
            데이터 주고받을때 xml을 많이 썻는데 복잡하고 번거로워 데이터보다 태그가 더 많아서 더 간단한게 필요해! -> JSON의 탄생
            JSON 표기법 : {속성명1: 속성값1, 속성명2: 속성값2..}
                        [{속성명1: 속성값1, 속성명2: 속성값2..}] -> 객체 배열
                        {키1:{속성명1: 속성값1} 키2:{ 속성명2: 속성값2..},} -> Map

    2.stringify()와 parse()
        JS객체를 서버로 전송하려면 , 직렬화(문자열로 변환)가 필요 data를 문자로 바꾸는것이 직렬화이다.
            메모리에 저장된 객체의 값을 저장하려면? 값을 하나씩 저장할 수 밖에 없다. 이게 직렬화! 쭉 하나로 이어서 만든것 그걸 text로 바꾼것
            저장도 가능하고 전송 또한 가능하다!
                HTTP가 text기반 프로토콜! 요청과 응답을 text로 주고 받는다.

        서버가 보낸 데이터(JSON문자열)를 JS객체로 변환할 때, 역직렬화가 필요
            객체를 먼저 만들고 받은 데이터로 채우면 된다!
            이때 쓰는 메서드가
                JSON.stringify() - 객체를 JSON 문자열로 변환 (직렬화, JS객체 -> 문자열)
                JSON.parse() - JSON 문자열을 객체로 변환 (역직렬화, 문자열 -> JS객체)

                객체를 문자로 문자를 객체로
                ★문자로 바꾸는 이유는? 전송하려고!

    3.Ajax란?
        Asynchronous javascript and XML - 요즘은 JSON을 주로 사용
            비동기 VS 동기
                기본적으로 우리는 동기!
                그걸 비동기로해서 효율을 높이려고 한다!

        비동기 통신으로 데이터를 주고 받기 위한 기술

        웹페이지 전체(data+UI)가 아닌 일부(data)만 업데이트 가능

        우린 게시판 덧글달때 화면 전체가 변경이 아니라 바뀐덧글만 보여줄때 사용할것

        요청(함수호출) 하면 응답이 올때까지 대기! 응답이 오면 그다음에 무언가 할수 있다 -> 동기방식(sync)

        요청을 해놓고 응답까지 기다리지 않고 다른일을 할 수 있다 -> 비동기방식(sync)
            ex) web browser는 멀티쓰레드 탭하나하나는 싱글 쓰레드!
            처리가 끝났다는것을 콜백함수로 알 수 있다.

    4.jQuery를 이용한 Ajax

    5.Ajax요청과 응답 과정
        js객체 stringify()를 통해 text로 바뀜 전송하려고 서버에게! 서버한테 객체를 전송하지는 못하니까!

        post로 서버에게 요청을 보내고 jackson-databind가 text를 java객체로 변환해준다! 그러면 그걸 컨트롤러에서 받을 수 있다!

        컨트롤러에서 작업이 실행되고 그 결과를 jackson-databind를 통해서 JSON문자열로 바뀌고 parse()를 통해서 text로 우리에게 다시 보여진다.

        ★전송은 문자열로!

        jackson-databind가 js객체를 java객체로 바꿔준다. @RequestBody, @ResponseBody 애너테이션이 필요하다.

    6.@RestController
        @ResponseBody 대신, 클래스에 @RestController 사용 가능 ( 메서드마다 붙이기 귀찮으니까 )

    7.REST란?
        Roy Fielding이 제안한 웹서비스 디자인 아키텍쳐 접근 방식
            api를 디자인하는 방식을 제안!

        프로토콜에 독립적이며, 주로 HTTP를 사용해서 구현

        ★★리소스 중심의 API 디자인 - HTTP메서드로 수행할 작업을 정의
            URI를 리소스 중심으로 설계를 하는것!

            GET,POST 뿐만 아니라 PUT,DELETE,PATCH등을 많이 활용하고 리소스 부분은 심플하게 가자! 유지보수도 편리,알아보기도 편리

    8.REST API란?
        Representational State Transfer API - REST 규약을 준수하는 API

        REST is a set of architectural constraints, not a protocol or a standard.
        API developers can implement REST in a variety of ways.

        API(Application Programming Interface) - 서로간의 약속

    9.RESTful API 설계
        REST규약을 잘 지킨 API를 설계해보자
        URI를 명사위주로 설계한다!

        예시 덧글기능 개발

        기존

        작업              URI                 HTTP메서드             설명
        읽기      /comment/read?cno=번호          GET         지정된 번호의 댓글을 보여준다.
        쓰기      /comment/write                 POST         작성한 게시물을 저장한다.
        삭제      /comment/remove                POST         댓글을 삭제한다.
        수정      /comment/modify                POST         수정된 게시물을 저장한다.

        비교예시

        작업              URI                 HTTP메서드             설명
        읽기      /comments                     GET           모든 댓글을 보여준다.
        읽기      /comments/{cno}               GET           지정된 번호의 댓글을 보여준다.
        쓰기      /comments                     POST          작성한 게시물을 저장한다.
        삭제      /comments/{cno}              DELETE         댓글을 삭제한다.
        수정      /comments/{cno}             PUT,PATCH       수정된 게시물을 저장한다.